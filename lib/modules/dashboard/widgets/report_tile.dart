import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:intl/intl.dart';
import 'package:open_file/open_file.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:printing/printing.dart';
import 'package:solarsense/modules/feasibility_report/controllers/report_controller.dart';
import 'package:solarsense/shared/constants/constants.dart';
import 'package:solarsense/shared/constants/utilities.dart';
import 'dart:io';

import '../../../shared/services/app_controller.dart';

class ReportTile extends StatelessWidget {
  final QueryDocumentSnapshot<Map<String, dynamic>> data;
  const ReportTile({Key? key, required this.data}) : super(key: key);

  void _generatePdf() async {
    showLoadingScreen();

    final tmpData = data.data();
    final pdf = pw.Document();

    final theme = pw.ThemeData.withFont(
      base: await PdfGoogleFonts.openSansRegular(),
      bold: await PdfGoogleFonts.openSansBold(),
      italic: await PdfGoogleFonts.openSansItalic(),
    );

    final ByteData bytes = await rootBundle.load('assets/icon.png');
    final Uint8List imageData = bytes.buffer.asUint8List();
    final image = pw.MemoryImage(imageData);

    final List weatherData = tmpData['weatherData']['days'];
    final List predictionData = tmpData['predictions'];
    final filteredWeatherData =
        ReportController.filterData(weatherData, predictionData);

    final double annualSavings = predictionData.reduce((a, b) => a + b) *
        double.parse(tmpData['electricityCost']);
    final double roi =
        annualSavings / double.parse(tmpData['installationCost']);
    final double paybackPeriod =
        double.parse(tmpData['installationCost']) / annualSavings;

    final pw.Container header = pw.Container(
        width: double.infinity,
        padding: const pw.EdgeInsets.all(10.0),
        color: PdfColor.fromHex('0b004d'),
        child: pw.Text('Feasibility Report',
            textAlign: pw.TextAlign.center,
            style: const pw.TextStyle(
              fontSize: 20,
              color: PdfColors.white,
            )));

    final DateTime installationDate =
        DateFormat('yyyy-MM-dd').parse(tmpData['installationDate']);
    DateTime currentDate = installationDate;
    DateTime newDate =
        installationDate.add(const Duration(days: ReportController.daysToAdd));

    final pw.Column userInfo =
        pw.Column(crossAxisAlignment: pw.CrossAxisAlignment.start, children: [
      pw.Text('Report #${data.id} Generated by',
          style: pw.TextStyle(fontSize: 12, fontWeight: pw.FontWeight.bold)),
      pw.SizedBox(height: 10),
      pw.Text(AppController.to.state.appUser.value!.fullName,
          style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.normal)),
      pw.Text(AppController.to.state.appUser.value!.email,
          style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.normal)),
      pw.Text(tmpData['locationName'],
          style: pw.TextStyle(fontSize: 10, fontWeight: pw.FontWeight.normal)),
      pw.SizedBox(height: 7),
      pw.Text('Date: ${tmpData['date']}',
          style: pw.TextStyle(
              fontSize: 9,
              fontWeight: pw.FontWeight.normal,
              fontStyle: pw.FontStyle.italic)),
      pw.Text('Timeframe: ${tmpData['timeframe']}',
          style: pw.TextStyle(
              fontSize: 9,
              fontWeight: pw.FontWeight.normal,
              fontStyle: pw.FontStyle.italic)),
    ]);

    final pw.Row userInfoRow =
        pw.Row(mainAxisAlignment: pw.MainAxisAlignment.spaceBetween, children: [
      userInfo,
      pw.Image(image, width: 85, height: 85),
    ]);

    final pw.Column solarInfoTable = ReportController.createTable([
      'Description',
      'Info'
    ], [
      ['Installation Cost', "Rs ${tmpData['installationCost']}"],
      [
        'Installation Date',
        "${installationDate.year}-${installationDate.month}-${installationDate.day}"
      ],
      ['Electricity Price (kWh)', "Rs ${tmpData['electricityCost']} kWh"],
      ['Panel Capacity', "${tmpData['panelCapacity']} kWh"]
    ], 'Solar Panel Information');

    final pw.Column energyTable = ReportController.createTable(
        ['Year', 'Month', 'Energy Produced'],
        filteredWeatherData,
        'Energy Production (Prediction)');

    final pw.Column analysisTable = ReportController.createTable([
      'Description',
      'Info'
    ], [
      ['Annual Savings', "Rs ${annualSavings.toStringAsFixed(2)}"],
      ['ROI', roi.toStringAsFixed(2)],
      ['Payback Period', "${paybackPeriod.toStringAsFixed(2)} years"]
    ], 'Analysis');

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        theme: theme,
        build: (context) => [
          header,
          pw.SizedBox(height: 50),
          userInfoRow,
          pw.SizedBox(height: 80),
          solarInfoTable,
          pw.SizedBox(height: 60),
        ],
      ),
    );

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        theme: theme,
        build: (context) =>
            [energyTable, pw.SizedBox(height: 60), analysisTable],
      ),
    );

    final directory = await getTemporaryDirectory();

    final file = File(
        "${directory.path}/${currentDate.year}${currentDate.month}-${newDate.year}${newDate.month}-FeasibilityReport.pdf");
    await file.writeAsBytes(await pdf.save());
    OpenFile.open(file.path);

    hideLoadingScreen();
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(5.0),
      decoration: BoxDecoration(
        color: Colors.amber,
        borderRadius: BorderRadius.only(
            topLeft: Radius.circular(8.w), topRight: Radius.circular(8.w)),
      ),
      width: double.infinity,
      child: Text(
        'Report #${data.id}',
        textAlign: TextAlign.center,
        overflow: TextOverflow.ellipsis,
        style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 12.0),
      ),
    );
  }

  Widget _buildDownloadPdfButton() {
    return Material(
      borderRadius: BorderRadius.only(
          bottomLeft: Radius.circular(8.w), bottomRight: Radius.circular(8.w)),
      color: ColorConstants.primaryColor,
      child: InkWell(
        borderRadius: BorderRadius.only(
            bottomLeft: Radius.circular(8.w),
            bottomRight: Radius.circular(8.w)),
        onTap: _generatePdf,
        child: Container(
          padding: const EdgeInsets.all(7.0),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(8.w),
                bottomRight: Radius.circular(8.w)),
          ),
          width: double.infinity,
          child: const Text(
            'Download PDF',
            textAlign: TextAlign.center,
            style: TextStyle(color: Colors.white),
          ),
        ),
      ),
    );
  }

  Widget _data(String type, String data) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          '$type:',
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        SizedBox(
          width: 5.w,
        ),
        Text(data),
        SizedBox(
          height: 5.h,
        ),
      ],
    );
  }

  Widget _buildData() {
    final tmpData = data.data();
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          _data('Date', tmpData['date']),
          _data('Timeframe', tmpData['timeframe']),
          _data('Installation Cost', 'Rs ${tmpData['installationCost']}'),
          _data('Installation Date', tmpData['installationDate']),
          _data('Electricity Cost', 'Rs ${tmpData['electricityCost']}'),
          _data('Panel Capacity', '${tmpData['panelCapacity']} kWh'),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      margin: EdgeInsets.symmetric(vertical: 15.h, horizontal: 15.w),
      decoration: BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.3),
              spreadRadius: 5,
              blurRadius: 10,
            ),
          ],
          borderRadius: BorderRadius.circular(8.w)),
      child: Column(
        children: [
          _buildHeader(),
          _buildData(),
          _buildDownloadPdfButton(),
        ],
      ),
    );
  }
}
